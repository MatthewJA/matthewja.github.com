// Generated by CoffeeScript 1.6.3
/*
CLASSES
*/


(function() {
  var Snake, draw, getMainLoop, start, update, updateCanvasSize;

  Snake = (function() {
    function Snake(x, y) {
      this.x = x;
      this.y = y;
      this.d = 0;
      this.v = 0.001;
      this.r = 15;
      this.x0 = this.x - this.radius();
      this.y0 = this.y;
      this.colour = {
        snake: "#EFEFEF",
        debug: "#444444"
      };
      this.width = 0.015;
    }

    Snake.prototype.radius = function() {
      return 1 / this.r;
    };

    Snake.prototype.move = function(dt) {
      this.d += this.v * dt;
      this.x = this.radius() * Math.cos(this.d) + this.x0;
      return this.y = this.radius() * Math.sin(this.d) + this.y0;
    };

    Snake.prototype.draw = function(context) {
      var size;
      size = context.canvas.width;
      context.lineWidth = this.width / 10 * size;
      context.strokeStyle = this.colour.debug;
      context.fillStyle = this.colour.debug;
      context.beginPath();
      context.arc(this.x0 * size, this.y0 * size, this.width * size / 4, 0, 2 * Math.PI);
      context.closePath();
      context.fill();
      context.beginPath();
      context.arc(this.x0 * size, this.y0 * size, this.radius() * size, 0, 2 * Math.PI);
      context.closePath();
      context.stroke();
      context.fillStyle = this.colour.snake;
      context.beginPath();
      context.arc(this.x * size, this.y * size, this.width * size, 0, 2 * Math.PI);
      context.closePath();
      return context.fill();
    };

    return Snake;

  })();

  /*
  HELPER FUNCTIONS
  */


  /*
  MAIN FUNCTIONS
  */


  updateCanvasSize = function(canvas, context) {
    var height, width;
    height = Math.min(window.innerHeight, window.innerWidth);
    width = height;
    canvas.style.width = "" + width + "px";
    canvas.style.height = "" + height + "px";
    context.canvas.width = width;
    return context.canvas.height = height;
  };

  update = (function() {
    return update = function(dt, entities) {
      var entity, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        _results.push(typeof entity.move === "function" ? entity.move(dt) : void 0);
      }
      return _results;
    };
  }).call(this);

  draw = (function() {
    var colour;
    colour = {
      background: "#222222",
      snake: "#EFEFEF"
    };
    return draw = function(context, entities) {
      var entity, _i, _len, _results;
      context.fillStyle = colour.background;
      context.fillRect(0, 0, context.canvas.width, context.canvas.height);
      _results = [];
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        _results.push(entity.draw(context));
      }
      return _results;
    };
  }).call(this);

  getMainLoop = (function(canvas, entities) {
    var context, lastUpdate, mainLoop;
    context = canvas.getContext("2d");
    lastUpdate = (new Date()).getTime();
    return mainLoop = function(fps) {
      var dt, now;
      now = (new Date()).getTime();
      dt = now - lastUpdate;
      lastUpdate = now;
      updateCanvasSize(canvas, context);
      update(dt, entities);
      draw(context, entities);
      return setTimeout(mainLoop, 1 / fps);
    };
  });

  start = (function() {
    var canvas, entities, handleKeyPress;
    canvas = document.getElementById("canvas");
    entities = [];
    entities.push(new Snake(0.5, 0.5));
    handleKeyPress = function(e) {
      var entity, _i, _len, _results;
      console.log(e.keyCode);
      _results = [];
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        _results.push(typeof entity.handleKeyPress === "function" ? entity.handleKeyPress(e.keyCode) : void 0);
      }
      return _results;
    };
    return start = function() {
      window.addEventListener("keydown", handleKeyPress, false);
      return getMainLoop(canvas, entities)(60);
    };
  }).call(this);

  start();

}).call(this);
