// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["jquery", "frontend/setEventHandlers", "frontend/settings", "backend/expressionIndex", "backend/equationIndex", "require", "frontend/setExpressionAddendums", "frontend/expressionToString"], function($, setEventHandlers, settings, expressionIndex, equationIndex, require, setExpressionAddendums, expressionToString) {
    var refreshExpressionsWithVariable, rewriteEquation, rewriteExpression;
    rewriteEquation = function(equationID, newEquation) {
      var equationDiv, html, position;
      if (settings.get("mathJaxEnabled")) {
        html = newEquation.toMathML(equationID, false, "0", true);
        equationDiv = $(html);
        position = $("#equation-" + equationID).position();
        $("#equation-" + equationID).replaceWith(equationDiv);
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        MathJax.Hub.Queue(function() {
          $("#equation-" + equationID).css({
            top: "" + position.top + "px",
            left: "" + position.left + "px",
            position: "absolute"
          });
          return require(["frontend/setEventHandlers"], function(setEventHandlers) {
            return setEventHandlers(equationDiv);
          });
        });
      } else {
        html = equation.toHTML(equationID, false, "0", true);
        equationDiv = $(html);
        $("#equation-" + equationID).replaceWith(equationDiv);
        $("#equation-" + equationID).css({
          top: "" + position.top + "px",
          left: "" + position.left + "px",
          position: "absolute"
        });
        require(["frontend/setEventHandlers"], function(setEventHandlers) {
          return setEventHandlers(equationDiv);
        });
      }
      return equationIndex.set(equationID, newEquation);
    };
    rewriteExpression = function(expressionID, newExpression) {
      var evaluationUnchanged, exp, expressionDiv, html, oldGemEvaluatedExpression, oldGemUncertaintyExpression, position, uncertaintyUnchanged, _ref, _ref1;
      exp = expressionIndex.get(expressionID);
      oldGemEvaluatedExpression = (_ref = exp._gem_evaluatedExpression) != null ? _ref.copy() : void 0;
      oldGemUncertaintyExpression = (_ref1 = exp._gem_uncertaintyExpression) != null ? _ref1.copy() : void 0;
      setExpressionAddendums(newExpression);
      evaluationUnchanged = (oldGemEvaluatedExpression != null ? oldGemEvaluatedExpression.equals(newExpression._gem_evaluatedExpression) : oldGemEvaluatedExpression === newExpression._gem_evaluatedExpression);
      uncertaintyUnchanged = (oldGemUncertaintyExpression != null ? oldGemUncertaintyExpression.equals(newExpression._gem_UncertaintyExpression) : oldGemUncertaintyExpression === newExpression._gem_UncertaintyExpression);
      if (!((typeof exp.equals === "function" ? exp.equals(newExpression) : void 0) && evaluationUnchanged && uncertaintyUnchanged)) {
        console.log("" + exp + " not equal to " + newExpression);
        if (settings.get("mathJaxEnabled")) {
          html = expressionToString(newExpression, expressionID);
          expressionDiv = $(html);
          position = $("#expression-" + expressionID).position();
          $("#expression-" + expressionID).replaceWith(expressionDiv);
          MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
          MathJax.Hub.Queue(function() {
            $("#expression-" + expressionID).css({
              top: "" + position.top + "px",
              left: "" + position.left + "px",
              position: "absolute"
            });
            return require(["frontend/setEventHandlers"], function(setEventHandlers) {
              return setEventHandlers(expressionDiv);
            });
          });
        } else {
          html = expressionToString(newExpression, expressionID);
          expressionDiv = $(html);
          position = $("#expression-" + expressionID).position();
          $("#expression-" + expressionID).replaceWith(expressionDiv);
          $("#expression-" + expressionID).css({
            top: "" + position.top + "px",
            left: "" + position.left + "px",
            position: "absolute"
          });
          require(["frontend/setEventHandlers"], function(setEventHandlers) {
            return setEventHandlers(expressionDiv);
          });
        }
        return expressionIndex.set(expressionID, newExpression);
      }
    };
    refreshExpressionsWithVariable = function(variable) {
      if (variable == null) {
        variable = null;
      }
      return require(["backend/equivalenciesIndex"], function(equivalenciesIndex) {
        var equivalencies, expression, index, v, _i, _len, _ref, _results;
        equivalencies = equivalenciesIndex.get(variable);
        _ref = expressionIndex.getAllExpressions();
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          expression = _ref[index];
          if (variable != null) {
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = equivalencies.length; _j < _len1; _j++) {
                v = equivalencies[_j];
                if (__indexOf.call(expression.getAllVariables(), v) >= 0) {
                  _results1.push(rewriteExpression(index, expressionIndex.get(index)));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          } else {
            _results.push(rewriteExpression(index, expressionIndex.get(index)));
          }
        }
        return _results;
      });
    };
    return {
      rewriteEquation: rewriteEquation,
      rewriteExpression: rewriteExpression,
      rewriteVariable: function(equationID, variableID, newLabel, newVariableID) {
        if (newVariableID == null) {
          newVariableID = null;
        }
        throw new Error("Not implemented.");
      },
      refreshExpressionsWithVariable: refreshExpressionsWithVariable,
      refreshExpressions: function() {
        return refreshExpressionsWithVariable(null);
      }
    };
  });

}).call(this);
