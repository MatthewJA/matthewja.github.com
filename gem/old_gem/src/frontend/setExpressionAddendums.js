// Generated by CoffeeScript 1.6.3
(function() {
  define(["backend/numericalValues", "backend/uncertaintiesIndex", "backend/equivalenciesIndex", "frontend/settings"], function(numericalValues, uncertaintiesIndex, equivalenciesIndex, settings) {
    return function(expression) {
      var evaluatedExpression, otherVariable, showSymbolicUncertainties, uncertaintyExpression, variable, variables, _i, _j, _len, _len1, _results;
      showSymbolicUncertainties = settings.get("showSymbolicUncertainties");
      variables = expression.right.getAllVariables();
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        variable = variables[_i];
        if (numericalValues.get(variable) != null) {
          evaluatedExpression = expression.sub(numericalValues.getNumericalValues(), uncertaintiesIndex.getUncertaintyMap(), equivalenciesIndex, settings.get("assumeZeroUncertainty"), true);
          expression._gem_evaluatedExpression = evaluatedExpression;
          console.log("set a value");
          break;
        }
      }
      if (showSymbolicUncertainties || (expression._gem_evaluatedExpression != null)) {
        _results = [];
        for (_j = 0, _len1 = variables.length; _j < _len1; _j++) {
          otherVariable = variables[_j];
          if (showSymbolicUncertainties || (uncertaintiesIndex.get(otherVariable) != null)) {
            uncertaintyExpression = expression.right.getUncertainty().sub(numericalValues.getNumericalValues(), uncertaintiesIndex.getUncertaintyMap(), equivalenciesIndex, settings.get("assumeZeroUncertainty"), true);
            expression._gem_uncertaintyExpression = uncertaintyExpression;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
  });

}).call(this);
