// Generated by CoffeeScript 1.6.3
(function() {
  define(["coffeequate"], function(coffeequate) {
    var formulae;
    formulae = {
      "kinetic-energy": function() {
        return new coffeequate.Equation("Ek", "m * v**2 * 1/2");
      },
      "momentum": function() {
        return new coffeequate.Equation("p", "m * v");
      },
      "gravity": function() {
        return new coffeequate.Equation("F", "\\G * m * M * r**-2");
      },
      "gravitational-potential-energy": function() {
        return new coffeequate.Equation("Ep", "-1 * \\G * m * M * r**-1");
      },
      "gravitational-potential-energy-simple": function() {
        return new coffeequate.Equation("Ep", "m * g * h");
      },
      "force": function() {
        return new coffeequate.Equation("F", "m * a");
      },
      "centripetal-force": function() {
        return new coffeequate.Equation("F", "m * v**2 * r**-1");
      },
      "product": function() {
        return new coffeequate.Equation("a", "b * c");
      },
      "contrived-pow-example": function() {
        return new coffeequate.Equation("a", "(b**-1)");
      },
      "projectile-motion": function() {
        return new coffeequate.Equation("s", "u * t + 1/2 * a * t**2");
      },
      "projectile-velocity": function() {
        return new coffeequate.Equation("v", "u + a * t");
      },
      "energy-mass-relation": function() {
        return new coffeequate.Equation("E", "m * \\c ** 2");
      },
      "differential-velocity": function() {
        return new coffeequate.Equation("a", "@v");
      },
      "distance-over-time": function() {
        return new coffeequate.Equation("v", "d * t**-1");
      },
      "velocity-over-time": function() {
        return new coffeequate.Equation("a", "v * t**-1");
      }
    };
    return {
      get: function(name) {
        if (name in formulae) {
          return formulae[name]();
        } else {
          throw new Error("No formula called " + name + " exists.");
        }
      },
      getAllFormulaNames: function() {
        var formula, names;
        names = [];
        for (formula in formulae) {
          names.push(formula);
        }
        return names;
      },
      makeEquation: function(left, right) {
        return new coffeequate.Equation(left, right);
      }
    };
  });

}).call(this);
