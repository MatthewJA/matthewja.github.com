// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function() {
    var equivalencies;
    equivalencies = [];
    return {
      add: function(a, b) {
        var aStored, bStored, equivalency, index, newEquivalency, variable, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        aStored = null;
        bStored = null;
        for (index = _i = 0, _len = equivalencies.length; _i < _len; index = ++_i) {
          equivalency = equivalencies[index];
          if (__indexOf.call(equivalency, a) >= 0) {
            aStored = index;
          }
          if (__indexOf.call(equivalency, b) >= 0) {
            bStored = index;
          }
        }
        if ((aStored != null) && (bStored != null)) {
          if (aStored === bStored) {
            return;
          }
          newEquivalency = [];
          _ref = equivalencies[aStored];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            variable = _ref[_j];
            if (__indexOf.call(newEquivalency, variable) < 0) {
              newEquivalency.push(variable);
            }
          }
          _ref1 = equivalencies[bStored];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            variable = _ref1[_k];
            if (__indexOf.call(newEquivalency, variable) < 0) {
              newEquivalency.push(variable);
            }
          }
          if (aStored > bStored) {
            equivalencies.splice(aStored, 1);
            equivalencies.splice(bStored, 1);
          } else {
            equivalencies.splice(bStored, 1);
            equivalencies.splice(aStored, 1);
          }
          return equivalencies.push(newEquivalency);
        } else if (aStored != null) {
          return equivalencies[aStored].push(b);
        } else if (bStored != null) {
          return equivalencies[bStored].push(a);
        } else {
          return equivalencies.push([a, b]);
        }
      },
      get: function(variable) {
        var equivalency, _i, _len;
        for (_i = 0, _len = equivalencies.length; _i < _len; _i++) {
          equivalency = equivalencies[_i];
          if (__indexOf.call(equivalency, variable) >= 0) {
            return equivalency;
          }
        }
      },
      clear: function() {
        return equivalencies.splice(0);
      }
    };
  });

}).call(this);
