// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "frontend/setEventHandlers", "frontend/settings", "backend/expressionIndex", "backend/equationIndex", "require", "frontend/setExpressionAddendums", "frontend/expressionToString"], function($, setEventHandlers, settings, expressionIndex, equationIndex, require, setExpressionAddendums, expressionToString) {
    var rewriteEquation, rewriteExpression;
    rewriteEquation = function(equationID, newEquation) {
      var equationDiv, html, position;
      if (settings.get("mathJaxEnabled")) {
        html = newEquation.toMathML(equationID, false, "0", true);
        equationDiv = $(html);
        position = $("#equation-" + equationID).position();
        $("#equation-" + equationID).replaceWith(equationDiv);
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        MathJax.Hub.Queue(function() {
          $("#equation-" + equationID).css({
            top: "" + position.top + "px",
            left: "" + position.left + "px",
            position: "absolute"
          });
          return require(["frontend/setEventHandlers"], function(setEventHandlers) {
            return setEventHandlers(equationDiv);
          });
        });
      } else {
        html = equation.toHTML(equationID, false, "0", true);
        equationDiv = $(html);
        $("#equation-" + equationID).replaceWith(equationDiv);
        $("#equation-" + equationID).css({
          top: "" + position.top + "px",
          left: "" + position.left + "px",
          position: "absolute"
        });
        require(["frontend/setEventHandlers"], function(setEventHandlers) {
          return setEventHandlers(equationDiv);
        });
      }
      return equationIndex.set(equationID, newEquation);
    };
    rewriteExpression = function(expressionID, newExpression) {
      var exp, expressionDiv, html, position;
      setExpressionAddendums(newExpression);
      exp = expressionIndex.get(expressionID);
      if (!(typeof exp.equals === "function" ? exp.equals(newExpression) : void 0)) {
        console.log("" + exp + " not equal to " + newExpression);
        if (settings.get("mathJaxEnabled")) {
          html = expressionToString(newExpression, expressionID);
          expressionDiv = $(html);
          position = $("#expression-" + expressionID).position();
          $("#expression-" + expressionID).replaceWith(expressionDiv);
          MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
          MathJax.Hub.Queue(function() {
            $("#expression-" + expressionID).css({
              top: "" + position.top + "px",
              left: "" + position.left + "px",
              position: "absolute"
            });
            return require(["frontend/setEventHandlers"], function(setEventHandlers) {
              return setEventHandlers(expressionDiv);
            });
          });
        } else {
          html = expressionToString(newExpression, expressionID);
          expressionDiv = $(html);
          position = $("#expression-" + expressionID).position();
          $("#expression-" + expressionID).replaceWith(expressionDiv);
          $("#expression-" + expressionID).css({
            top: "" + position.top + "px",
            left: "" + position.left + "px",
            position: "absolute"
          });
          require(["frontend/setEventHandlers"], function(setEventHandlers) {
            return setEventHandlers(expressionDiv);
          });
        }
        return expressionIndex.set(expressionID, newExpression);
      }
    };
    return {
      rewriteEquation: rewriteEquation,
      rewriteExpression: rewriteExpression,
      rewriteVariable: function(equationID, variableID, newLabel, newVariableID) {
        if (newVariableID == null) {
          newVariableID = null;
        }
        throw new Error("Not implemented.");
      }
    };
  });

}).call(this);
