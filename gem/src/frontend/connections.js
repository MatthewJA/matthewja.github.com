// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["frontend/settings", "jquery", "backend/equivalenciesIndex"], function(settings, $, equivalenciesIndex) {
    var connections, distance, generateLine, generateLineCSS, repaint;
    connections = [];
    distance = function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    };
    generateLineCSS = function(x1, y1, x2, y2) {
      var angle, css, height, translateX, translateY, width;
      height = settings.get("connectionWidth");
      width = Math.floor(distance(x1, y1, x2, y2)) - settings.get("variablePadding") * 2;
      angle = Math.atan2(y2 - y1, x2 - x1);
      translateX = x1 + Math.cos(angle) * settings.get("variablePadding");
      translateY = y1 + Math.sin(angle) * settings.get("variablePadding");
      css = {
        "-moz-transform": "rotate(" + angle + "rad)",
        "-moz-transform-origin": "0 0",
        "-webkit-transform": "rotate(" + angle + "rad)",
        "-webkit-transform-origin": "0 0",
        "-o-transform": "rotate(" + angle + "rad)",
        "-o-transform-origin": "0 0",
        "-ms-transform": "rotate(" + angle + "rad)",
        "-ms-transform-origin": "0 0",
        "transform": "rotate(" + angle + "rad)",
        "transform-origin": "0 0",
        "position": "absolute",
        "top": "" + translateY + "px",
        "left": "" + translateX + "px",
        "height": "" + height + "px",
        "width": "" + width + "px"
      };
      return css;
    };
    generateLine = function(x1, y1, x2, y2) {
      var css, div;
      div = $("<div />");
      div.attr("class", "line");
      css = generateLineCSS(x1, y1, x2, y2);
      div.css(css);
      return div;
    };
    repaint = function(connection) {
      var h1, h2, p1, p2, w1, w2;
      if (connection.deleted == null) {
        p1 = connection.source.offset();
        p2 = connection.target.offset();
        w1 = connection.source.width();
        w2 = connection.target.width();
        h1 = connection.source.height();
        h2 = connection.target.height();
        return connection.element.css(generateLineCSS(p1.left + w1 / 2, p1.top + h1 / 2, p2.left + w2 / 2, p2.top + h2 / 2));
      }
    };
    return {
      repaintVariables: function(element) {
        var connection, variable, variables, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if (element == null) {
          element = null;
        }
        if (element != null) {
          variables = (function() {
            var _i, _len, _ref, _results;
            _ref = element.find(".variable");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              variable = _ref[_i];
              _results.push($(variable).attr("id"));
            }
            return _results;
          })();
          _results = [];
          for (_i = 0, _len = connections.length; _i < _len; _i++) {
            connection = connections[_i];
            if ((_ref = connection.source.attr("id"), __indexOf.call(variables, _ref) >= 0) || (_ref1 = connection.target.attr("id"), __indexOf.call(variables, _ref1) >= 0)) {
              _results.push(repaint(connection));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _results1 = [];
          for (_j = 0, _len1 = connections.length; _j < _len1; _j++) {
            connection = connections[_j];
            _results1.push(repaint(connection));
          }
          return _results1;
        }
      },
      connect: function(source, target) {
        var connection, element, h1, h2, p1, p2, w1, w2;
        p1 = source.offset();
        p2 = target.offset();
        w1 = source.width();
        w2 = target.width();
        h1 = source.height();
        h2 = target.height();
        element = generateLine(p1.left + w1 / 2, p1.top + h1 / 2, p2.left + w2 / 2, p2.top + h2 / 2);
        element.attr("id", "line-" + connections.length);
        $("#connection-space").append(element);
        connection = {
          source: source,
          target: target,
          element: element
        };
        connections.push(connection);
        return element;
      },
      removeAllVariableConnections: function(formula) {
        var connection, variable, variables, _i, _len, _results;
        variables = formula.find(".variable").addBack(formula.attr("id"));
        _results = [];
        for (_i = 0, _len = connections.length; _i < _len; _i++) {
          connection = connections[_i];
          _results.push((function() {
            var _base, _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = variables.length; _j < _len1; _j++) {
              variable = variables[_j];
              variable = $(variable);
              if (variable.is(connection.source) || variable.is(connection.target)) {
                console.log(variable, "matches", connection.source, "or", connection.target);
                if (typeof (_base = connection.element).remove === "function") {
                  _base.remove();
                }
                _results1.push(connection.deleted = true);
              } else {
                _results1.push(console.log(variable, "doesn't match", connection.source, "or", connection.target));
              }
            }
            return _results1;
          })());
        }
        return _results;
      },
      setEquivalency: function(a, b) {
        var c, cID, connection, d, dID, equivalency, exists, sourceID, targetID, _i, _len, _results;
        equivalency = equivalenciesIndex.add(a, b);
        _results = [];
        for (_i = 0, _len = equivalency.length; _i < _len; _i++) {
          c = equivalency[_i];
          cID = new RegExp("^variable-equation-\\d+-" + c + "$");
          _results.push((function() {
            var _j, _k, _len1, _len2, _results1;
            _results1 = [];
            for (_j = 0, _len1 = equivalency.length; _j < _len1; _j++) {
              d = equivalency[_j];
              dID = new RegExp("^variable-equation-\\d+-" + d + "$");
              exists = false;
              for (_k = 0, _len2 = connections.length; _k < _len2; _k++) {
                connection = connections[_k];
                sourceID = connection.source.attr("id");
                targetID = connection.target.attr("id");
                if ((sourceID.match(cID) && targetID.match(dID)) || (sourceID.match(dID) && targetID.match(cID))) {
                  exists = true;
                  break;
                }
              }
              if (!exists) {
                _results1.push(this.connect($('[id^="variable-equation"][id$="-' + c + '"]'), $('[id^="variable-equation"][id$="-' + d + '"]')));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };
  });

}).call(this);
