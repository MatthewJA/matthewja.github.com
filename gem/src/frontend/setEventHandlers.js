// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "frontend/settings", "frontend/connections", "require", "frontend/substituteEquation", "backend/expressionIndex", "frontend/makeEquation"], function($, settings, connections, require, substituteEquation, expressionIndex, makeEquation) {
    var getInfo, initialised, setDoubleClickEvents, setEquationDraggables, setVariableContextMenus, setVariableDraggables;
    initialised = false;
    setEquationDraggables = function(element) {
      var draggableProperties;
      if (element == null) {
        element = null;
      }
      draggableProperties = {
        containment: "#whiteboard-panel",
        scroll: false,
        cancel: ".variable",
        drag: function(event, ui) {
          return connections.repaintVariables($(event.target));
        },
        stop: function(event, ui) {
          return connections.repaintVariables($(event.target));
        }
      };
      if (element != null) {
        return element.draggable(draggableProperties);
      } else {
        $(".equation").draggable(draggableProperties);
        return $(".expression").draggable(draggableProperties);
      }
    };
    setDoubleClickEvents = function(element) {
      var target;
      if (element == null) {
        element = null;
      }
      if (element != null) {
        target = $(element).find(".variable");
      } else {
        target = $(".variable");
      }
      target.doubletap(function() {
        var formulaID, formulaType, variable, _ref;
        _ref = getInfo($(this)), variable = _ref[0], formulaType = _ref[1], formulaID = _ref[2];
        console.log("Double-clicked " + variable + " in " + formulaType + " " + formulaID);
        if (formulaType === "equation") {
          return require(["backend/solveEquation", "frontend/addExpression"], function(solveEquation, addExpression) {
            var solution, solutions, _i, _len, _results;
            solutions = solveEquation(formulaID, variable);
            _results = [];
            for (_i = 0, _len = solutions.length; _i < _len; _i++) {
              solution = solutions[_i];
              _results.push(addExpression(solution));
            }
            return _results;
          });
        }
      });
      return target.disableSelection();
    };
    setVariableContextMenus = function(element) {
      var target;
      if (element == null) {
        element = null;
      }
      if (element != null) {
        target = $(element).find(".variable");
      } else {
        target = $(".variable");
      }
      return target.contextMenu("context-menu-variable", {
        "Set numerical value...": {
          click: function(variableElement) {
            var equation, equationID, formulaID, formulaType, leftHandSide, value, variable, _ref, _ref1;
            _ref = getInfo(variableElement), variable = _ref[0], formulaType = _ref[1], formulaID = _ref[2];
            value = window.prompt("Enter a numerical value for this variable.", "1");
            _ref1 = makeEquation(variable, value), equationID = _ref1[0], equation = _ref1[1];
            leftHandSide = equation.left.label;
            return connections.setEquivalency(leftHandSide, variable);
          }
        }
      }, {
        disable_native_context_menu: true,
        leftClick: false
      });
    };
    setVariableDraggables = function(element) {
      var target;
      if (element == null) {
        element = null;
      }
      if (element != null) {
        target = $(element).find(".variable");
      } else {
        target = $(".variable");
      }
      target.draggable({
        start: function(event, ui) {
          if ($(event.target).parents(".equation").length !== 0) {
            $(ui.helper).addClass("equationVariableHelper");
          } else if ($(event.target).parents(".expression").length !== 0) {
            $(ui.helper).addClass("expressionVariableHelper");
          }
          $(ui.helper).css("font-size", $(event.target).css("font-size"));
          if (!settings.get("mathJaxEnabled")) {
            $(ui.helper).css("font-family", "monospace");
          }
          return $(event.target).fadeTo(0, 0);
        },
        drag: function(event, ui) {},
        stop: function(event, ui) {
          return $(event.target).fadeTo(0, 1);
        },
        containment: "#whiteboard-panel",
        revert: true,
        helper: "clone",
        appendTo: "#whiteboard-panel"
      });
      return target.droppable({
        tolerance: "pointer",
        accept: ".variable",
        drop: function(event, ui) {
          var draggableFormulaID, draggableFormulaType, draggableID, droppableFormulaID, droppableFormulaType, droppableID, variableIDa, variableIDb, _ref, _ref1;
          _ref = getInfo($(event.target)), droppableID = _ref[0], droppableFormulaType = _ref[1], droppableFormulaID = _ref[2];
          _ref1 = getInfo($(ui.draggable)), draggableID = _ref1[0], draggableFormulaType = _ref1[1], draggableFormulaID = _ref1[2];
          if (droppableFormulaType === "equation" && draggableFormulaType === "equation") {
            variableIDa = getInfo($(event.target))[0];
            variableIDb = getInfo($(ui.draggable))[0];
            connections.setEquivalency(variableIDa, variableIDb);
            return require(["frontend/rewrite", "backend/equivalenciesIndex"], function(rewrite, equivalenciesIndex) {
              var expression, i, _i, _ref2, _results;
              _results = [];
              for (i = _i = 0, _ref2 = expressionIndex.size(); 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
                expression = expressionIndex.get(i);
                _results.push(rewrite.rewriteExpression(i, expression.expandAndSimplify(equivalenciesIndex).simplify(equivalenciesIndex)));
              }
              return _results;
            });
          } else if (droppableFormulaType === "expression" && draggableFormulaType === "equation") {
            return substituteEquation(droppableFormulaID, draggableFormulaID, draggableID);
          }
        }
      });
    };
    getInfo = function(variableElement) {
      var formulaID, formulaNumber, formulaType, variable, _ref;
      variable = variableElement.attr("id");
      if (/variable-/.test(variable)) {
        variable = variable.split("-").slice(3).join("-");
      }
      formulaID = variableElement.parents("div").attr("id");
      _ref = formulaID.split("-"), formulaType = _ref[0], formulaNumber = _ref[1];
      return [variable, formulaType, formulaNumber];
    };
    return function(element) {
      if (element == null) {
        element = null;
      }
      setEquationDraggables(element);
      setDoubleClickEvents(element);
      setVariableDraggables(element);
      return setVariableContextMenus(element);
    };
  });

}).call(this);
