// Generated by CoffeeScript 1.6.3
(function() {
  define(["coffeequate", "elementTools", "Expression", "index"], function(CQ, elementTools, Expression, index) {
    var Equation;
    return Equation = (function() {
      function Equation(lhs, rhs) {
        var changeLabels, id;
        this.lhs = CQ(lhs);
        this.rhs = CQ(rhs);
        index.equation.add(this);
        id = this.id;
        changeLabels = function(variable) {
          variable.label += id;
          return variable;
        };
        this.lhs = this.lhs.mapOverVariables(changeLabels);
        this.rhs = this.rhs.mapOverVariables(changeLabels);
        this.element = elementTools.makeEquation(this.toMathML());
      }

      Equation.prototype.solveFor = function(label) {
        var expr, expressions, soln, solved;
        expr = this.toCoffeequate();
        solved = expr.solve(label);
        expressions = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = solved.length; _i < _len; _i++) {
            soln = solved[_i];
            _results.push(new Expression(CQ(label), soln));
          }
          return _results;
        })();
        return expressions;
      };

      Equation.prototype.toCoffeequate = function() {
        var Add, Mul;
        Mul = CQ.raw.Mul;
        Add = CQ.raw.Add;
        return CQ(new Add(this.rhs, new Mul(-1, this.lhs))).expand().simplify();
      };

      Equation.prototype.toMathML = function() {
        return "<mrow>" + (this.lhs.toMathML()) + "<mo>=</mo>" + (this.rhs.toMathML()) + "</mrow>";
      };

      Equation.prototype.toExpression = function() {
        return new Expression(this.lhs, this.rhs);
      };

      return Equation;

    })();
  });

}).call(this);
