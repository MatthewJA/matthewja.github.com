// Generated by CoffeeScript 1.6.3
(function() {
  define(["src/variable", "src/constant", "src/algebraException"], function(Variable, Constant, AlgebraException) {
    var Equation;
    return Equation = (function() {
      function Equation(leftTerms, rightTerms) {
        this.leftTerms = leftTerms;
        this.rightTerms = rightTerms;
      }

      Equation.prototype.solve = function(variable) {
        var leftTerm, leftTerms, power, rightTerm, rightTerms, term, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
        leftTerms = [];
        rightTerms = [];
        _ref = this.leftTerms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          term = _ref[_i];
          if (term instanceof Variable && term.label === variable) {
            leftTerm = term.copy();
            leftTerms.push(leftTerm);
          } else {
            rightTerm = term.copy();
            rightTerm.pow(-1);
            rightTerms.push(rightTerm);
          }
        }
        _ref1 = this.rightTerms;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          term = _ref1[_j];
          if (term instanceof Variable && term.label === variable) {
            leftTerm = term.copy();
            leftTerm.pow(-1);
            leftTerms.push(leftTerm);
          } else {
            rightTerm = term.copy();
            rightTerms.push(rightTerm);
          }
        }
        if (leftTerms.length === 0) {
          throw new AlgebraException("Variable to solve for was not in equation.");
        }
        power = 1;
        for (_k = 0, _len2 = leftTerms.length; _k < _len2; _k++) {
          term = leftTerms[_k];
          power = term.power;
        }
        for (_l = 0, _len3 = leftTerms.length; _l < _len3; _l++) {
          term = leftTerms[_l];
          term.pow(1 / power);
        }
        for (_m = 0, _len4 = rightTerms.length; _m < _len4; _m++) {
          term = rightTerms[_m];
          term.pow(1 / power);
        }
        return new Equation(leftTerms, rightTerms);
      };

      Equation.prototype.toString = function() {
        var leftHandSide, output, rightHandSide, term, _i, _j, _len, _len1, _ref, _ref1;
        output = [];
        _ref = this.leftTerms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          term = _ref[_i];
          if (term instanceof Variable && term.power === 0) {

          } else {
            output.push(term.toString());
          }
        }
        leftHandSide = output.join(" * ");
        output = [];
        _ref1 = this.rightTerms;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          term = _ref1[_j];
          if (term instanceof Variable && term.power === 0) {

          } else {
            output.push(term.toString());
          }
        }
        rightHandSide = output.join(" * ");
        return leftHandSide + " = " + rightHandSide;
      };

      return Equation;

    })();
  });

}).call(this);
