// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "redrawCanvas", "index"], function($, redrawCanvas, index) {
    var dblclickVariableHandler, draggableFormulaProperties, draggableVariableProperties, droppableVariableProperties, equation, expression, mousedownHandler, mouseupHandler;
    draggableFormulaProperties = {
      containment: "#whiteboard",
      scroll: false,
      cancel: ".variable",
      start: function(event, ui) {},
      drag: function(event, ui) {
        return redrawCanvas();
      },
      stop: function(event, ui) {
        $(this).css("left", "" + (parseInt($(this).css("left")) / ($("#main").width() / 100)) + "%");
        $(this).css("top", "" + (parseInt($(this).css("top")) / ($("#main").height() / 100)) + "%");
        return $(event.target).find("*").removeClass("grabbed");
      }
    };
    draggableVariableProperties = {
      containment: "#whiteboard",
      scroll: false,
      revert: true,
      helper: "clone",
      appendTo: "#whiteboard",
      start: function(event, ui) {
        var variable;
        $(event.target).fadeTo(0, 0);
        variable = $(event.target).closest(".variable");
        variable.find("*").addBack(variable).removeClass("grabbed");
        if ($(event.target).parents(".equation").length !== 0) {
          $(ui.helper).addClass("equationHelper variable");
        } else {
          $(ui.helper).addClass("expressionHelper variable");
        }
        return $(ui.helper).mouseup(mouseupHandler);
      },
      drag: function(event, ui) {},
      stop: function(event, ui) {
        return $(event.target).fadeTo(0, 1);
      }
    };
    droppableVariableProperties = {
      drop: function(event, ui) {
        var draggedIsEquation, draggedLabel, droppedIsEquation, droppedLabel;
        draggedLabel = ui.draggable.text();
        droppedLabel = $(this).text();
        draggedIsEquation = !!ui.draggable.parents(".equation").length;
        droppedIsEquation = !!$(this).parents(".equation").length;
        if (droppedIsEquation && draggedIsEquation) {
          return index.equivalency.add(ui.draggable, $(this));
        }
      }
    };
    dblclickVariableHandler = function(event) {
      var equation, equationId, expressions, isEquation, label, variable;
      variable = $(event.target).closest(".variable");
      label = variable.text();
      equation = $(event.target).closest(".equation");
      isEquation = !!equation.length;
      if (isEquation) {
        equationId = equation.attr("id").split("equation-")[1];
        equation = index.equation.get(equationId);
        expressions = equation.solveFor(label);
        return require(["addExpression"], function(addExpression) {
          var expression, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = expressions.length; _i < _len; _i++) {
            expression = expressions[_i];
            _results.push(addExpression(expression));
          }
          return _results;
        });
      }
    };
    mousedownHandler = function(event) {
      return $(event.target).addClass("grabbed");
    };
    mouseupHandler = function(event) {
      return $(event.target).removeClass("grabbed");
    };
    equation = function(element) {
      element.draggable(draggableFormulaProperties);
      element.css("position", "absolute");
      element.mousedown(mousedownHandler).mouseup(mouseupHandler);
      return element.find(".variable").draggable(draggableVariableProperties).droppable(droppableVariableProperties).dblclick(dblclickVariableHandler);
    };
    expression = function(element) {
      element.draggable(draggableFormulaProperties);
      element.css("position", "absolute");
      element.mousedown(mousedownHandler).mouseup(mouseupHandler);
      return element.find(".variable").draggable(draggableVariableProperties).droppable(droppableVariableProperties).dblclick(dblclickVariableHandler);
    };
    return {
      equation: equation,
      expression: expression
    };
  });

}).call(this);
