// Generated by CoffeeScript 1.6.3
(function() {
  define(function() {
    var equation, equivalency, expression, line;
    equation = (function() {
      var add, equations, get, getRawEquations;
      equations = [];
      add = function(equation) {
        equation.id = equations.length;
        return equations.push(equation);
      };
      get = function(id) {
        return equations[id];
      };
      getRawEquations = function() {
        return equations;
      };
      return {
        add: add,
        get: get,
        getRaw: getRawEquations
      };
    }).call();
    expression = (function() {
      var add, expressions, get, getRawExpressions;
      expressions = [];
      add = function(expression) {
        expression.id = expressions.length;
        return expressions.push(expression);
      };
      get = function(id) {
        return expressions[id];
      };
      getRawExpressions = function() {
        return expressions;
      };
      return {
        add: add,
        get: get,
        getRaw: getRawExpressions
      };
    }).call();
    line = (function() {
      var add, get, getRawLines, lines, redrawAll;
      lines = [];
      add = function(l) {
        l.id = lines.length;
        return lines.push(l);
      };
      get = function(id) {
        return lines[id];
      };
      getRawLines = function() {
        return lines;
      };
      redrawAll = function(context) {
        var l, _i, _len, _results;
        if (context == null) {
          context = $("#lines-canvas")[0].getContext("2d");
        }
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          l = lines[_i];
          _results.push(l.draw(context));
        }
        return _results;
      };
      return {
        add: add,
        get: get,
        getRaw: getRawLines,
        redrawAll: redrawAll
      };
    }).call();
    equivalency = (function() {
      var add, equivalencies, get, getRawEquivalencies;
      equivalencies = {};
      add = function(a, b) {
        var al, bl,
          _this = this;
        al = a.text();
        bl = b.text();
        if (al in equivalencies) {
          equivalencies[al].push(bl);
        } else {
          equivalencies[al] = [al, bl];
        }
        if (bl in equivalencies) {
          equivalencies[bl].push(al);
        } else {
          equivalencies[bl] = [bl, al];
        }
        return require(["Line"], function(Line) {
          var l;
          l = new Line(a, b);
          line.add(l);
          return l.draw($("#lines-canvas")[0].getContext("2d"));
        });
      };
      get = function(a) {
        return equivalencies[a];
      };
      getRawEquivalencies = function() {
        return equivalencies;
      };
      return {
        add: add,
        get: get,
        getRaw: getRawEquivalencies
      };
    }).call();
    return {
      equation: equation,
      expression: expression,
      line: line,
      equivalency: equivalency
    };
  });

}).call(this);
