// Generated by CoffeeScript 1.6.3
/*
	JS-Algebra, a computer algebra system for JavaScript, written in CoffeeScript.

	At the moment, only does multiplication and division.
*/


(function() {
  var Constant, Equation, Variable, test;

  Constant = (function() {
    function Constant(numerator, denominator) {
      this.numerator = numerator;
      this.denominator = denominator != null ? denominator : 1;
    }

    Constant.prototype.pow = function(power) {
      var _ref;
      if (power < 0) {
        power *= -1;
        _ref = [this.denominator, this.numerator], this.numerator = _ref[0], this.denominator = _ref[1];
      }
      this.numerator = Math.pow(this.numerator, power);
      return this.denominator = Math.pow(this.denominator, power);
    };

    Constant.prototype.copy = function() {
      return new Constant(this.numerator, this.denominator);
    };

    Constant.prototype.toString = function() {
      if (this.denominator === 1) {
        return "" + this.numerator;
      }
      return "" + this.numerator + "/" + this.denominator;
    };

    return Constant;

  })();

  Variable = (function() {
    function Variable(label, power) {
      this.label = label;
      this.power = power != null ? power : 1;
    }

    Variable.prototype.pow = function(power) {
      return this.power *= power;
    };

    Variable.prototype.copy = function() {
      return new Variable(this.label, this.power);
    };

    Variable.prototype.toString = function() {
      switch (this.power) {
        case 1:
          return this.label;
        case 0:
          return "1";
        default:
          return this.label + "**" + this.power;
      }
    };

    return Variable;

  })();

  Equation = (function() {
    function Equation(leftTerms, rightTerms) {
      this.leftTerms = leftTerms;
      this.rightTerms = rightTerms;
    }

    Equation.prototype.solve = function(variable) {
      var leftTerm, leftTerms, power, rightTerm, rightTerms, term, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
      leftTerms = [];
      rightTerms = [];
      _ref = this.leftTerms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        term = _ref[_i];
        if (term instanceof Variable && term.label === variable) {
          leftTerm = term.copy();
          leftTerms.push(leftTerm);
        } else {
          rightTerm = term.copy();
          rightTerm.pow(-1);
          rightTerms.push(rightTerm);
        }
      }
      _ref1 = this.rightTerms;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        term = _ref1[_j];
        if (term instanceof Variable && term.label === variable) {
          leftTerm = term.copy();
          leftTerm.pow(-1);
          leftTerms.push(leftTerm);
        } else {
          rightTerm = term.copy();
          rightTerms.push(rightTerm);
        }
      }
      power = 1;
      for (_k = 0, _len2 = leftTerms.length; _k < _len2; _k++) {
        term = leftTerms[_k];
        power = term.power;
      }
      for (_l = 0, _len3 = leftTerms.length; _l < _len3; _l++) {
        term = leftTerms[_l];
        term.pow(1 / power);
      }
      for (_m = 0, _len4 = rightTerms.length; _m < _len4; _m++) {
        term = rightTerms[_m];
        term.pow(1 / power);
      }
      return new Equation(leftTerms, rightTerms);
    };

    Equation.prototype.toString = function() {
      var leftHandSide, output, rightHandSide, term, _i, _j, _len, _len1, _ref, _ref1;
      output = [];
      _ref = this.leftTerms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        term = _ref[_i];
        if (term instanceof Variable && term.power === 0) {

        } else {
          output.push(term.toString());
        }
      }
      leftHandSide = output.join(" * ");
      output = [];
      _ref1 = this.rightTerms;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        term = _ref1[_j];
        if (term instanceof Variable && term.power === 0) {

        } else {
          output.push(term.toString());
        }
      }
      rightHandSide = output.join(" * ");
      return leftHandSide + " = " + rightHandSide;
    };

    return Equation;

  })();

  test = function() {
    var Ek, eq, half, m, v2;
    Ek = new Variable("Ek");
    half = new Constant(1, 2);
    m = new Variable("m");
    v2 = new Variable("v", 2);
    eq = new Equation([Ek], [half, m, v2]);
    console.log("Solving " + eq.toString() + " for v");
    return console.log("Solved: " + eq.solve("v").toString());
  };

}).call(this);
